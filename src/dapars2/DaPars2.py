#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
DaPars2(Modified): Dynamics analysis of Alternative PolyAdenylation from multiple RNA-seq data.
"""

import argparse
import os

from dapars2.DaPars_Extract_Anno import Annotation_prepar_3UTR_extraction, Subtract_different_strand_overlap, get_chromList
from dapars2.extract_read_depth import extract_read_depth
from dapars2.DaPars2_Multi_Sample_Multi_Chr import De_Novo_3UTR_Identification_Loading_Target_Wig_for_TCGA_Multiple_Samples_Multiple_threads_Main3_shared_list
from merge_apa_quant_res_by_chr import merge_apa_res


def DaPars2_main():
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
        )
    parser.add_argument('-b', '--bed', dest='gene_bed_file', metavar='gene_bed_file', type=str, required=True, help='Input gene bed file, which is downloaded from UCSC Table browser')
    parser.add_argument('-s', '--symbol', dest='gene_symbol_annotation_file', metavar='gene_symbol_annotation_file', type=str, required=True, help='Input gene symbol annotation file, which is downloaded from UCSC Table browser')
    parser.add_argument('--wigfiles',dest="wigfiles", metavar="wigfiles", nargs="+", help='wig files generated by: "bedtools genomecov -ibam *.bam -bga -split -trackline"')
    parser.add_argument('--flagstat-files',dest="flagstat", metavar="flagstat", nargs="+", help='flagstat files generated by: "samtools flagstat *.bam", only pair-end support')
    parser.add_argument('-t', '--threads', dest="Num_threads", metavar="threads", type=int, default=4, help='Number of threads')
    parser.add_argument('-p', '--pass', dest="Coverage_threshold", metavar="coverage_threshold", type=float, default=10, help='Coverage threshold')
    parser.add_argument("--sample-list", dest="sample_list", metavar="sample_list", nargs="+", default=None, type=str, help="sample list")
    args = parser.parse_args()
    
    outdir = "DaPars_results"
    
    gene_bed_file = args.gene_bed_file
    gene_symbol_annotation_file = args.gene_symbol_annotation_file
    output_final_extract_file = os.path.join(outdir, "3UTR_annotation.bed")
    chromlist_file = os.path.join(outdir, "chromList.txt")
    output_extract_file = os.path.join(outdir,'temp_anno_extracted.bed')
    print("Generating regions ...")
    Annotation_prepar_3UTR_extraction(gene_bed_file, gene_symbol_annotation_file,output_extract_file)
    Subtract_different_strand_overlap(output_extract_file,output_final_extract_file)
    get_chromList(output_final_extract_file, chromlist_file)
    print("Extracting read depth ...")
    wigfiles = args.wigfiles
    flagstat = args.flagstat
    read_depth = os.path.join(outdir, "readDepth.txt")
    assert len(wigfiles) == len(flagstat), "wigfiles and flagstat files should be the same length"
    extract_read_depth(wigfiles, flagstat, read_depth)
    print("Calculate PDUI ...")
    outdir_prefix = os.path.join(outdir, "DaPars2_out")
    result_prefix = "DaPars2"
    De_Novo_3UTR_Identification_Loading_Target_Wig_for_TCGA_Multiple_Samples_Multiple_threads_Main3_shared_list(
        chromlist_file, wigfiles, outdir_prefix, output_final_extract_file, result_prefix, read_depth, args.Num_threads, args.Coverage_threshold)
    print("Merge results ...")
    if args.sample_list is None:
        sample_list = args.sample_list
    else:
        sample_list = [os.path.basename(i).split(".")[0] for i in args.wigfiles]
    merge_apa_res(outdir_prefix, result_prefix, chromlist_file, sample_list, os.path.join(outdir, "Dapars2_res.all_chromosomes.txt"))


if __name__ == '__main__':
    DaPars2_main()
